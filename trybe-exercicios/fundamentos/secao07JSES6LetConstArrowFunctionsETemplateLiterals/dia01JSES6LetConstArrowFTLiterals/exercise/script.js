// Parte I
// üöÄ Exerc√≠cio 1
// Altere o tipo das vari√°veis(var) para let ou const para que respeitem o escopo em 
// que foram declaradas, e altere a fun√ß√£o utilizando arrow function e template literals.
// Modifique as vari√°veis para que respeitem o escopo onde est√£o declaradas;
function testingScope(escopo) {
  if (escopo === true) {
    let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
    ifScope = ifScope + ' √≥timo, fui utilizada no escopo !';
    console.log(ifScope);
  } else {
    const elseScope = 'N√£o devo ser utilizada fora do meu escopo (else)';
    console.log(elseScope);
  }
  // console.log(ifScope + ' o que estou fazendo aqui ? :O'); // Se necess√°rio esta linha pode ser removida.
}
testingScope(true);
testingScope(false);

// Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function;
// Modifique as concatena√ß√µes para template literals.
const ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
const testingScopeArrow = escopo => escopo ? console.log(`${ifScope} √≥timo, fui utilizada no escopo !`)
                                  : console.log('N√£o devo ser utilizada fora do meu escopo (else)');
testingScopeArrow(true);
testingScopeArrow(false);


// Crie uma fun√ß√£o que retorne um array em ordem crescente.
// Crie uma fun√ß√£o que fa√ßa com que o array oddsAndEvens fique em ordem crescente;
// Utilize template literals para que a chamada 
// console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>);
// retorne a frase ‚ÄúOs n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!‚Äù.
// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort().
// Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.
const oddsAndEvens = [13, 3, 4, 10, 7, 2];
const sortOddsAndEvens = (numberList) => `Os n√∫meros ${numberList.sort((a, b) => a - b)} se encontram ordenados de forma crescente!`;

console.log(sortOddsAndEvens(oddsAndEvens)); // ser√° necess√°rio alterar essa linha üòâ


// Parte II
// Exerc√≠cio 1
// Abaixo, voc√™ ver√° algumas especifica√ß√µes de algoritmos para desenvolver. √â fundamental
// que voc√™ utilize o que aprendeu sobre let, const, arrow functions, template literals e
// ternary operator.
// Crie uma fun√ß√£o que receba um n√∫mero e retorne seu fatorial.
// Na matem√°tica, o fatorial de um n√∫mero inteiro e positivo N, representado por N!, √© o
// produto de todos os seus antecessores at√© o n√∫mero um. Exemplo: 4! = 4 * 3 * 2 * 1 = 24.
// Com base nessas informa√ß√µes:
// Crie a fun√ß√£o factorial que recebe um n√∫mero como par√¢metro, utilizando arrow functions
// (Lembre-se de armazenar a fun√ß√£o utilizando o tipo de vari√°vel correta).
// Dentro da fun√ß√£o crie uma vari√°vel result, que ser√° o retorno final da fun√ß√£o.
// Crie a l√≥gica para retornar o fatorial de N!.
// Imprima no terminal ‚ÄúEsse √© o fatorial resultado da fun√ß√£o‚Äú (Lembre-se de utilizar
// template literals nesse momento).
// B√¥nus: tente fazer o mesmo exerc√≠cio de forma recursiva. Spoiler: √â poss√≠vel resolver
// com uma linha usando ternary operator.

// Exerc√≠cio 2
// Crie uma fun√ß√£o que receba uma frase como par√¢metro e retorne a maior palavra contida
// nesta frase.
// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort().
longestWord('Ant√¥nio foi ao banheiro e n√£o sabemos o que aconteceu') // retorna 'aconteceu'

// üöÄ Exerc√≠cio 3
// Crie uma p√°gina HTML que possua um contador de cliques.
// Al√©m da estrutura b√°sica do HTML, sua p√°gina deve possuir:
// Uma tag que receber√° o valor atualizado da quantidade de clicks do bot√£o.
// Um bot√£o com o texto click aqui!, que receber√° um event listener do tipo click;
// Na estrutura do script (dentro do HTML ou em um arquivo de JavaScript ):
// Crie uma vari√°vel clickCount que ir√° acumular o n√∫mero de clicks do bot√£o;
// Crie a l√≥gica do evento, para que a cada click no bot√£o, a vari√°vel seja atualizada
// com acr√©scimo de valor 1. Exemplo: Caso n√£o tenha sido realizado nenhum click, o valor
// renderizado ser√° de 0. Caso o bot√£o seja clicado 5 vezes o valor renderizado no HTML
// ser√° de 5.
// Dica: Nesse exerc√≠cio utilize document. getElementById para retornar o elemento do DOM
// que deseja.

// üöÄ Exerc√≠cio 4
// Crie duas fun√ß√µes JavaScript com as seguintes especifica√ß√µes:
// N√£o se esque√ßa de usar template literals
// Fun√ß√£o 1: Escreva uma fun√ß√£o que substitua a letra ‚Äòx‚Äô em uma frase.
// O nome da fun√ß√£o dever√° ser substituaX;
// A fun√ß√£o dever√° receber um nome por par√¢metro;
// Declare dentro da fun√ß√£o uma vari√°vel do tipo const, com o nome frase, atribuindo o valor 'Tryber x aqui!';
// A fun√ß√£o dever√° retornar uma nova frase onde o x da frase 'Tryber x aqui!' seja substitu√≠do pelo nome passado por par√¢metro.
// Exemplo:
// Par√¢metro: ‚ÄòBebeto‚Äô
// Retorno: ‚ÄòTryber Bebeto aqui!‚Äô
// Spoiler: O m√©todo split() pode ser utilizado de diferentes maneiras, como separar as palavras de um texto.
// Fun√ß√£o 2: Escreva uma fun√ß√£o que ir√° receber o retorno da Fun√ß√£o 1 por par√¢metro e retornar√° uma nova string.
// O nome da fun√ß√£o dever√° ser minhasSkills;
// A fun√ß√£o dever√° receber o retorno da Fun√ß√£o 1 - substituaX por par√¢metro;
// Declare dentro da fun√ß√£o uma vari√°vel com o nome skills, do tipo const;
// A vari√°vel skills dever√° ser um array contendo tr√™s strings com tecnologias que voc√™ j√° aprendeu.
// Crie uma var√°vel do tipo let e concatene o valor retornado da Fun√ß√£o 1 - substituaX (utilize template literals), a frase 'Minhas tr√™s principais habilidades s√£o:' e o valor da vari√°vel skills.
