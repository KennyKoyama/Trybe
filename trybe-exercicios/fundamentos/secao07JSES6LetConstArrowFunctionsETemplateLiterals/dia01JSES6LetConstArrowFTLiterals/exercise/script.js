// Parte I
// üöÄ Exerc√≠cio 1
// Altere o tipo das vari√°veis(var) para let ou const para que respeitem o escopo em 
// que foram declaradas, e altere a fun√ß√£o utilizando arrow function e template literals.
// Modifique as vari√°veis para que respeitem o escopo onde est√£o declaradas;
function testingScope(escopo) {
  if (escopo === true) {
    let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
    ifScope = ifScope + ' √≥timo, fui utilizada no escopo !';
    console.log(ifScope);
  } else {
    const elseScope = 'N√£o devo ser utilizada fora do meu escopo (else)';
    console.log(elseScope);
  }
  // console.log(ifScope + ' o que estou fazendo aqui ? :O'); // Se necess√°rio esta linha pode ser removida.
}
testingScope(true);
testingScope(false);

// Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function;
// Modifique as concatena√ß√µes para template literals.
const ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
const testingScopeArrow = escopo => escopo ? console.log(`${ifScope} √≥timo, fui utilizada no escopo !`)
                                  : console.log('N√£o devo ser utilizada fora do meu escopo (else)');
testingScopeArrow(true);
testingScopeArrow(false);


// Crie uma fun√ß√£o que retorne um array em ordem crescente.
const oddsAndEvens = [13, 3, 4, 10, 7, 2];

const sortOddsAndEvens = (numberList) => `Os n√∫meros ${numberList.sort((a, b) => a - b)} se encontram ordenados de forma crescente!`;
// Seu c√≥digo aqui.
// Crie uma fun√ß√£o que fa√ßa com que o array oddsAndEvens fique em ordem crescente;
// Utilize template literals para que a chamada 
// console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>);
// retorne a frase ‚ÄúOs n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!‚Äù.
// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort().
// Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.

console.log(sortOddsAndEvens(oddsAndEvens)); // ser√° necess√°rio alterar essa linha üòâ
